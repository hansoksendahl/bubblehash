var bubblehash=function bubblehash(){var out={};function logger(messages,prefix){prefix=prefix?prefix+": ":"";var out={};function log(type,message){console[type](message)}function logCode(code,type,callback){var message=prefix+messages[code];return function(){log(type,message);if(callback){callback.apply(this,arguments)}}}out.warning=function(code,callback){return logCode(code,"warning",callback)};out.error=function(code,callback){return logCode(code,"error",callback)};out.message=function(code,callback){return logCode(code,"log",callback)};return out}out.logger=logger;var xhr=function xhr(){var logMessages={},log;logMessages[0]="We get signal!";logMessages[1]="Opening connection...";logMessages[8192]="Connction attempt timed out.";logMessages[8193]="Lost signal.";log=logger(logMessages,"Signal");return function init(url){var request=new XMLHttpRequest,out={},headers={},data;request.ontimeout=log.message(8192);request.onerror=log.message(8193);function send(type,callback){var queryString="",queryIndex,key;if(data){queryString="json="+JSON.stringify(data);if(type==="get"){queryIndex=url.indexOf("?");if(queryIndex!==-1){url.replace("?","?"+queryString+"&")}}}request.open(type,url);for(key in headers){request.setRequestHeader(key,headers[key])}request.onload=callback;if(type==="post"){request.setRequestHeader("Content-type","application/x-www-form-urlencoded");request.send(queryString)}else{request.send()}}out.headers=function headers(key,value){if(arguments.length<2){if(typeof key==="string"){return headers[key]}for(value in key){headers[value]=key[value]}}else{headers[key]=value}};out.data=function dataSetter(obj){if(arguments.length===0){return data}data=obj;return out};out.get=function get(callback){send("get",callback);return out};out.post=function(callback){send("post",callback);return out};return out}}();out.xhr=xhr;var rtc=function rtc(){var peerConnection=window.mozRTCPeerConnection||window.webkitRTCPeerConnection,iceCandidate=window.mozRTCIceCandidate||window.RTCIceCandidate,sessionDescription=window.mozRTCSessionDescription||window.RTCSessionDescription,getUserMedia=navigator.getUserMedia||navigator.mozGetUserMedia||navigator.webkitGetUserMedia,logMessages={};logMessages[0]="Data channel established.";logMessages[1]="Creating an offer.";logMessages[2]="Creating an answer.";logMessages[3]="Setting local description.";logMessages[4]="Setting remote description.";logMessages[8192]="An error occured while setting the local description.";logMessages[8193]="An error occured creating an offer.";logMessages[8194]="An error occured creating an answer.";logMessages[8195]="An error occured while creating the remote description.";logMessages[16]="Data channel opened.";logMessages[17]="Data channel message received.";logMessages[18]="Data channel closed.";logMessages[8208]="Error on data channel.";var log=logger(logMessages,"RTC");function bindDataChannelEvents(channel){channel.onmessage=log.message(17);channel.onopen=log.message(16);channel.onerror=log.error(8208);channel.onclose=log.message(18)}return function init(server,options){var connection=new peerConnection(server,options),out={};out.connection=connection;connection.onicecandidate=addIceCandidate;function message(event){var signal=JSON.parse(event.data);console.log(signal)}function addIceCandidate(event){if(event.candidate){connection.addIceCandidate(event.candidate)}}function createOffer(success){var datachannel=connection.createDataChannel("BH",{reliable:false});bindDataChannelEvents(datachannel);out.datachannel=datachannel;success=log.message(1,success);connection.createOffer(success,log.error(8193),{mandatory:{OfferToReceiveVideo:false,OfferToReceiveAudio:false}})}function createAnswer(success){connection.ondatachannel=function(event){var datachannel=event.channel;bindDataChannelEvents(datachannel);out.datachannel=datachannel};success=log.message(2,success);connection.createAnswer(success,log.error(8194),{mandatory:{OfferToReceiveVideo:false,OfferToReceiveAudio:false}})}function setLocalDescription(description,success){description=typeof description==="string"?JSON.parse(description):description;success=log.message(3,success);var dict=new sessionDescription(description);connection.setLocalDescription(dict,function(){success(dict)},log.error(8192))}function setRemoteDescription(description,success){description=typeof description==="string"?JSON.parse(description):description;success=log.message(4,success);var dict=new sessionDescription(description);connection.setRemoteDescription(dict,function(){success(dict)},log.error(8195))}out.open=function(callback){createOffer(function(description){setLocalDescription(description,callback)})};out.call=function(remoteDescription,callback){setRemoteDescription(remoteDescription);createAnswer(function(localDescription){setLocalDescription(localDescription);callback(localDescription)})};out.answer=function(description){setRemoteDescription(description)};return out}}();out.rtc=rtc;return out}();